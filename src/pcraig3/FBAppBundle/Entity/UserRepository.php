<?php

namespace pcraig3\FBAppBundle\Entity;

use Doctrine\DBAL\Exception\DatabaseObjectExistsException;
use Doctrine\ORM\EntityRepository;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserProviderInterface

{

    /**
     * @param $fid
     * @return User|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findOneByFacebookId( $fid ) {

        return $this->createQueryBuilder('u')
            ->andWhere('u.facebookId = :fid')
            ->setParameter('fid', $fid )
            ->getQuery()
            ->getOneOrNullResult();
    }

    /*  RESOURCES  */
    public function loadUserByUsername( $fid )
    {
        $user = $this->findOneByFacebookId( $fid );

        if(!$user)
            throw new UsernameNotFoundException('No User found with id \'' . htmlspecialchars( $fid ) . '\'');

        return $user;
    }

    public function refreshUser(UserInterface $user)
    {
        $class = get_class($user);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(sprintf(
                'Instances of "%s" are not supported.',
                $class
            ));
        }

        if (!$refreshedUser = $this->findOneByFacebookId( $user->getFacebookId() ) ) {
            throw new UsernameNotFoundException(sprintf('User with id %s not found', json_encode($user->getId())));
        }

        return $refreshedUser;
    }

    public function supportsClass($class)
    {
        return $this->getEntityName() === $class
        || is_subclass_of($class, $this->getEntityName());
    }
}
